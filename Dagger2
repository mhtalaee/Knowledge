Dagger is a dependency injection framework, which makes it easier to manage the dependencies between the classes in our app.

Dagger1 was reflection-based, Dagger2 is based on annotation processing, so it does the magic at compile time.

Dagger2 Annotations:
@Inject
@Provides
@Module
@Component
@Singleton
@BindsInstance 

--------------------------------------------------------@Inject Annotation------------------------------------------------------------

@Inject Annotation:

Dagger creates instances of your application classes and satisfies their dependencies. 
It uses the @Inject (javax.inject.Inject annotation) to identify which constructors and fields it is interested in.
Actually @Inject is used to provide Constructor Injection in app.

--constructor example:

class Thermosiphon implements Pump {
  private final Heater heater;

  @Inject
  Thermosiphon(Heater heater) {
    this.heater = heater;
  }

  ...
}

Because certain Android framework classes such as activities and fragments are instantiated by the system, Dagger can't create them for you.
Then you cannot use the @Inject annotation in the constructor of the class (constructor injection). Instead, you have to use field injection.

--field Injection example:

class CoffeeMaker {
  @Inject Heater heater;
  @Inject Pump pump;

  ...
}

Field injection should only be used in Android framework classes (where constructor injection cannot be used)

--------------------------------------------------------@Provides Annotation------------------------------------------------------------

@Provides Annotation:

@Inject doesn’t work everywhere:

 -Interfaces can’t be constructed (For implementation of interfaces, the best practice is using @Binds)
 
 -Third-party classes can’t be annotated.
 
 -Configurable objects must be configured (Like creating Room database intance that is created by: Room.databaseBuilder(...).build
 

For example, our dagger wants to create an instance of a class, but class isn't our so we can’t use @inject for this class constructor,
to solve this problem we write a fun that return an instance of this class and by @Provides we introduce this method to Dagger.

@Provides static Heater provideHeater() {
  return new ElectricHeater();
}

Another example: imagine our Dagger needs an instance of Context class, because Context is Android' class not our class, so it's impossible to
use @Inject annotation. we use @Provides annotation and introduce a method to get an instance of Context:

@Module
class ContextModule(private val appContext: Context) {
   @Provides
   fun appContext(): Context = appContext;
}


--It’s possible for @Provides methods to have dependencies of their own:

@Provides static Pump providePump(Thermosiphon pump) {
  return pump;
}

--------------------------------------------------------@Module Annotation------------------------------------------------------------

All @Provides methods must belong to a module (classes that have an @Module annotation)

@Module
class DripCoffeeModule {
  @Provides static Heater provideHeater() {
    return new ElectricHeater();
  }

  @Provides static Pump providePump(Thermosiphon pump) {
    return pump;
  }
}

--------------------------------------------------------@Component Annotation------------------------------------------------------------

@Component (ObjectGraph)

The @Inject and @Provides form a graph of objects.
Android Application base class should accesses that graph.
In Dagger2 this graph of objects is accessible via an @Component-annotated interface which has methods that have no arguments 
and return the desired type  and passing the module types to the modules parameter.
Dagger 2 then fully generates an implementation of that contract.

@Component(modules = DripCoffeeModule.class)
interface CoffeeShop {
  CoffeeMaker maker();
}

--If using @Inject in Constructor Injection, by writing a function in Component interface and specify a return type, we tell dagger that it must create 
codes to return such return type (like above maker() function).

The implementation of this Interface has same name as the interface prefixed with Dagger (DaggerCoffeeShop).
Obtain an instance by invoking the following method on that implementation.

--If using @Inject in field injection, by writing an Inject function with a type as input parameter, we tell dagger that it must saticfy dependencies 
in that input type. Example:

@Component
interface ApplicationComponent {
    fun inject(activity: LoginActivity)
}

Above inject function tells Dagger that LoginActivity requests injection so the graph needs to satisfy all the dependencies of the fields in
LoginActivity. Then in Activit (Fragment, ...) onCreate, we instantiate fields this way: 
appComponent.inject(this) 
//appComponent = our created DaggerAppComponent instance


create method: When all dependencies can be constructed without the needing user to create any dependency instance:

	CoffeeShop coffeeShop = DaggerCoffeeShop.create();

builder method: When it's needed that user dependency instance

	CoffeeShop coffeeShop = DaggerCoffeeShop.builder()
							.dripCoffeeModule(new DripCoffeeModule())
							.build();
							

@Component
interface ApplicationComponent {
    
    fun inject(activity: LoginActivity)
}

The Inject function tells Dagger that LoginActivity requests injection so the graph needs to satisfy all the dependencies of the fields 
that LoginActivity is requesting.
This functions can have any name, but calling them inject() when they receive the object to inject as a parameter is a convention in Dagger.

--------------------------------------------------------@Singleton Annotation------------------------------------------------------------
Scopes is a way to have a unique instance of a type in a component (scoping a type to the component's lifecycle).

@Singleton
Annotate an @Provides method or injectable class (class containing @Inject fields) with @Singleton. The graph will use a single instance 
of the value for all of its clients.

@Provides @Singleton static Heater provideHeater() {
  return new ElectricHeater();
}

@Singleton
class CoffeeMaker {
  ...
}


To declare that a component is associated with a given scope, simply apply the scope annotation to the component interface:

@Component(modules = DripCoffeeModule.class)
@Singleton
interface CoffeeShop {
  CoffeeMaker maker();
}

 @Singleton comes with the Dagger library,  but you can create a custom one with a different name 

--------------------------------------------------------@Named Annotation------------------------------------------------------------

@Named
For example when we need a string value as a input parameter, we use this annotation.
when creating a database, you need a database name, you can use this annotation:

@Provides @Named("name")
String provideDatabaseName();
--------------------------------------------------------Dagger 2 specifications------------------------------------------------------------

--Compile-time Validation
The Dagger annotation processor is strict and will cause a compiler error if any bindings are invalid or incomplete

--Compile-time Code Generation
Dagger’s annotation processor generates source files with names like CoffeeMaker_Factory.java or CoffeeMaker_MembersInjector.java. 
These files are Dagger implementation details. You shouldn’t need to use them directly. 
The only generated types you should refer to in your code are the ones Prefixed with Dagger for your component like DaggerAppComponent.

--------------------------------------------------------@BindsInstance Annotation------------------------------------------------------------

You could use @BindsInstance and manually define your own @Component.Builder to do the exact same thing as @Provides and @Module annotations do.

--------------------------------------------------------@Binds Annotation------------------------------------------------------------

@Binds is similar to @Provides annotation, but the way to use it is different:

1. Method annotated with @Binds is abstract (so class containing this method is abstract too), but method annotated with @Provides has implementation.

2. Method annotated with @Binds must have only one parameter whose type is assignable to the return type.

@Binds annotation benefit: 
@Binds generates less files and codes that cause into less size Dex file and App.
@Binds cause into reduce object creation flow

For creating an object by a method annotated with @Provides: Dagger starts with Component class -> Module Factory class -> Module class
For creating an object by a method annotated with @Binds: Dagger only use Component class

























































