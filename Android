-Hawk library: is used instead of Shared Preferences

-TargetSdkVersion 
   <= 22 : when user installs app, all permissions defined in Manifest file are granted tp app (impossible to upload on Google Play)
   >= 23 : permissions are granted in runtime
   always set TargetSdk & CompileSdk to latest version
   
-semver (Semantic Versioning): Versioning standards (semver.org)
	alwayes use 3-digit numbers for versionCode & versionName in build.gradle like:
		versionCode = 120   versionName = "1.2.0"

-jitpack: a repository for uploading your libraries

-Butter Knife library: To remove findViewById in code

  in kotlin it's enough to add following code to app gradle:
      androidExtensions{
            experimental = true
                }

-AndroidAnnotation: Open source framework for android development by Java

-Retrofit: Library to call webservices

-Lambda: Add following to build.gradle when you want to use lambda:

compileOptions {

sourceCompatibility JavaVersion.VERSION_1_8

targetCompatibility JavaVersion.VERSION_1_8

}

-BaseActivity: Always create a BaseActivity class that extends AppCompatActivity.
  then App activities extends this BaseActivity useful for avoid repeatetive code like when you use Hawk

-BaseApplication: this class extends Application class. this class is called before activities.
  
-LeakCanary: A library to detect memory leaks in android
  
-Test

    1. BlackBox Test: by end user
    2. WhiteBox Test
        2.1. by developer
        2.2. Unit Test: just for testing plain java & kotlin codes (using junit library)
        2.3. Android Test (instrumented test)
        2.3. TDD (Test Driven Development)
        
-Navigation Editor
	a navigation graph, which is an XML resource that represents the individual destination nodes within your app along with the actions that connect the nodes

-Picaso
	ImageView with photo from the internet
  
-GitKraken 
	To compare sources with sources on github

-AutoFillHint 
	EditText attribute to remeber previously inserted data
  
-JavaDecompiler
	A site for decompile APKs and compiled sources  
        
-swipe to refresh
	On Android, the “swipe to refresh” gesture displays a circular progress indicator to indicate that the UI is being refreshed.

-Memory leak
		Leak Canary lib (ILikeAndroid.ir)
    
-Architectures
      
      MVC
        View: Layout
        Controller: Activity
        Model: POJO
       
        Problem: causes big files
        
     
     MVP
       View: Activity - just includes android codes and codes that update view
       Presenter: includes business codes - master-mind of app
       Model: Data binding (WeService - DataBase - File)
        
          View & Model just inform Presenter about what happend and Presenter commands them what to do
          (https://antonioleiva.com/mvp-android)
          
-DI
        reduce classes dependency
          without DI, when in class B we have A a = new A, changing class A, causes error in class
          (http://www.javacreed.com/why-should-we-use-dependency-injection)
        -Costructor dependency injection: 
          در این روش کلاس C بعنوان ورودی کلاس B، inject شده
          در این روش وابستگی کمتر می شود ولی باز تا حد زیادی وابستگی وجود دارد مثلا اگر نام کلاس 
          C
          تغییر یابد
          class B(val c : C) {
          }
          
          class A {
          val c = C()
          val b = B(c)
          }
          
          روش زیر روش DI نیست
          در این روش کلاس c در کلاس B ایجاد شده
          class B {
          val c= C()
          }
          
          class A {
          val b = B()
          }
          
        
        -Interface Dependency Injection
          both classes impelement an interface (usually named Contract interface)
          one class accept a class that has impelemented interface as input 
          other class new an instance of other one and set itself as input       
          
    
    پوشه بندی پروژه
       
         -base folder: contains baseApplication, baseActivity, baseFragment
         -features folder (one folder for each useCase)
         -pojo folder: pojo classes
         -repository folder: contains DataBase & WebServices related files
         -utils folder: contains utilities & Constant files
         
-ProGuard & R8
  Both are used to Shrink, obfuscate, and optimize your app
  
  Code shrinking: detects and safely removes unused classes, fields, methods, and attributes from your app and its library dependencies 
  Resource shrinking: removes unused resources from your packaged app
  Obfuscation: shortens the name of classes and members, which results in reduced DEX file sizes
  Optimization: inspects and rewrites your code to further reduce the size of your app’s DEX files.
  
  Both ProGuard and R8 have similar features, with some distinct advantages for ProGuard.
  R8 works with all of your existing ProGuard rules files.
  
-OAuth (https://www.oauth.com)
OAuth is an authorization method to provide access to resources, but it is often used for authentication workflows anyway.
building a web app or a mobile app that talks to an existing OAuth 2.0 API: 

	1. creating an account on the OAuth service’s website and register App name, callback URL, ...
	
	2. get both client ID (is public) and client secret (must be kept private) from OAuth service's website
	
	3. get access token from OAuth server using client ID and secret
	
some OAuth services: GitHub, Google
mobile apps cannot maintain the confidentiality of a client secret. Because of this, mobile apps must use an OAuth flow that 
does not require a client secret.
Some OAuth services provide you with SDKs which handle the authorization process for you and you are better to use this SDKs.
Google provides an open source library called "AppAuth" and you can work manu OAuth 2 servers.

-Functional Programming
	
-Reactive Programming
	
-RxJava Operators
	rxmarbles.com

-Architecture Components: Collection of libraries that help you design robust, testable, and maintainable apps
	includes:
		-LiveDate
		-ViewModel
		-Room
		
- Common architectural principles
	1. Separation of concerns :
		It's a common mistake to write all your code in an Activity or a Fragment. These UI-based classes should only contain logic that 
		handles UI and os interactions. By keeping these classes as lean as possible, you can avoid many lifecycle-related problems.
	
	2. Drive UI from a model
		 Models are components that are responsible for handling the data for an app. They're independent from the View objects and 
		 app components in your app, so they're unaffected by the app's lifecycle and the associated concerns.

	Recommended app architecture:
	https://developer.android.com/topic/libraries/architecture/images/final-architecture.png
	
- MockWebServer:
	A library that can help you create a fake local server for testing your webservice calls.
	

-Best practices to makes your code base more robust, testable, and maintainable:
	https://developer.android.com/jetpack/docs/guide#best-practices
	
-Best practices for lifecycle-aware components
	https://developer.android.com/topic/libraries/architecture/lifecycle#lc-bp
	

-Kotlin coroutines: to manage long-running tasks and other operations that can run asynchronously.

-Sunflower: a gardening app illustrating Android development best practices with Android Jetpack.
	https://github.com/android/sunflower

-RxJava

	Observable: emits some values
	
	Operator: operates(modifies) the emitted value by Observable
	
	Observer: receives those values emitted by Observable and modified by Operator
	
	Types of Observables:
		
		Observable: emits more than one value.
			usecase: If the user wants to download a file from the internet, he should be provided with the progress of 
			the download. In this case, the Observable has to emit values at regular intervals. In this case, we can use 
			this Observable
		
		Flowable: similar to Observable with BackPressure strategy
		
		Single: emit only one value like a response from network call. 
		
		Maybe: is used when the observable has to emit a value or no value. It is not recommended much to use in Android Application Development.
		
		Completable: is used when the Observable has to do some task without emitting a value
		
-Room

	Room provides the following support for return values of RxJava2 types:
		
		@Query methods: Room supports return type Flowable and Observable.
		
		@Insert, @Update, and @Delete methods: Room supports return types Completable, Single<T>, Maybe<T>.


		
		@Insert with return type Completable: onComplete is called as soon as the insertion was done
		
		@Insert with return type Single<Long> or Maybe<Long>: value emitted on onSuccess is the row id of the item inserted
		
		@Insert with return type Single<List<Long>> or Maybe<List<Long>>: value emitted on onSuccess is the list of row ids of the items inserted
		
		In case of error inserting the data, Completable, Single and Maybe will emit the exception in onError.
		
		@Update / @Delete with return type Completable : onComplete is called as soon as the update/delete was done
		
		@Update / @Delete with return type Single<Integer> or Maybe<Integer> : value emitted on onSuccess is the number of rows affected by update/delete
		
		@Query with return type Flowable and Observable:
			
			When query returns no rows, the Flowable will not emit, neither onNext, nor onError.
			
			When there is a row in the database, the Flowable will trigger onNext.
			
			Every time the row is updated, the Flowable object will emit automatically, allowing you to update the UI based on the latest data.

		@Query can be used with Maybe and Single return types but If the row is updated, nothing happens.
		
		
		SQLite and Room don't have date data type, we should convert date to String (or Long) to store them in database.
		Because of that we define a Converter class and to introduce this class to Room we use @TypeConverters annotation in RoomDatabase class.
		
	-ThreeTenABP:  from Java8, old java.util.Date and java.util.Calendar packages replaced with new java.time package.
				   This new package attempts to improve old one by providing increased performance and ease of use.
				   Java8 java.time is also called  JSR310 or ThreeTen.
				   In android ThreeTen is just usable with API >= 26 and we have problem when using minSDK < 26
				   By ThreeTenABP library (written by JakeWharton) we can use ThreeTen when minSDK is < 26
	