-Butter Knife library: To remove findViewById in code

  in kotlin it's enough to add following code to app gradle:
      androidExtensions{
            experimental = true
                }

-AndroidAnnotation: Open source framework for android development by Java

-Retrofit: Library to call webservices

-Lambda: Add following to build.gradle when you want to use lambda:

compileOptions {

sourceCompatibility JavaVersion.VERSION_1_8

targetCompatibility JavaVersion.VERSION_1_8

}

-BaseActivity: Always create a BaseActivity class that extends AppCompatActivity.
  then App activities extends this BaseActivity useful for avoid repeatetive code like when you use Hawk

-BaseApplication: this class extends Application class. this class is called before activities.
  
-LeakCanary: A library to detect memory leaks in android
  
-Test

    1. BlackBox Test: by end user
    2. WhiteBox Test
        2.1. by developer
        2.2. Unit Test: just for testing plain java & kotlin codes (using junit library)
        2.3. Android Test (instrumented test)
        2.3. TDD (Test Driven Development)
        
-Navigation Editor
	a navigation graph, which is an XML resource that represents the individual destination nodes within your app along with the actions that connect the nodes

-Picaso
	ImageView with photo from the internet
  
-GitKraken 
	To compare sources with sources on github

-AutoFillHint 
	EditText attribute to remeber previously inserted data
  
-JavaDecompiler
	A site for decompile APKs and compiled sources  
        
-swipe to refresh
	On Android, the “swipe to refresh” gesture displays a circular progress indicator to indicate that the UI is being refreshed.

-Memory leak
		Leak Canary lib (ILikeAndroid.ir)
    
-Architectures
      
      MVC
        View: Layout
        Controller: Activity
        Model: POJO
       
        Problem: causes big files
        
     
     MVP
       View: Activity - just includes android codes and codes that update view
       Presenter: includes business codes - master-mind of app
       Model: Data binding (WeService - DataBase - File)
        
          View & Model just inform Presenter about what happend and Presenter commands them what to do
          
          
-DI
        reduce classes dependency
          without DI, when in class B we have A a = new A, changing class A, causes error in class
          
        -Costructor dependency injection: 
          در این روش کلاس C بعنوان ورودی کلاس B، inject شده
          در این روش وابستگی کمتر می شود ولی باز تا حد زیادی وابستگی وجود دارد مثلا اگر نام کلاس 
          C
          تغییر یابد
          class B(val c : C) {
          }
          
          class A {
          val c = C()
          val b = B(c)
          }
          
          روش زیر روش DI نیست
          در این روش کلاس c در کلاس B ایجاد شده
          class B {
          val c= C()
          }
          
          class A {
          val b = B()
          }
          
        
        -Interface Dependency Injection
          both classes impelement an interface (usually named Contract interface)
          one class accept a class that has impelemented interface as input 
          other class new an instance of other one and set itself as input       
          
    
    پوشه بندی پروژه
       
         -base folder: contains baseApplication, baseActivity, baseFragment
         -features folder (one folder for each useCase)
         -pojo folder: pojo classes
         -repository folder: contains DataBase & WebServices related files
         -utils folder: contains utilities & Constant files
         
-ProGuard & R8
  Both are used to Shrink, obfuscate, and optimize your app
  
  Code shrinking: detects and safely removes unused classes, fields, methods, and attributes from your app and its library dependencies 
  Resource shrinking: removes unused resources from your packaged app
  Obfuscation: shortens the name of classes and members, which results in reduced DEX file sizes
  Optimization: inspects and rewrites your code to further reduce the size of your app’s DEX files.
  
  Both ProGuard and R8 have similar features, with some distinct advantages for ProGuard.
  R8 works with all of your existing ProGuard rules files.
  
-OAuth
OAuth is an authorization method to provide access to resources
building a web app or a mobile app that talks to an existing OAuth 2.0 API: 

	1. creating an account on the OAuth service’s website (Github OAuth service,...)
